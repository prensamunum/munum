{"remainingRequest":"G:\\Files\\Gitlab\\Github\\munum\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!G:\\Files\\Gitlab\\Github\\munum\\node_modules\\zone.js\\dist\\zone.js","dependencies":[{"path":"G:\\Files\\Gitlab\\Github\\munum\\node_modules\\zone.js\\dist\\zone.js","mtime":1552242064056},{"path":"G:\\Files\\Gitlab\\Github\\munum\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552242047203},{"path":"G:\\Files\\Gitlab\\Github\\munum\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1552242034165}],"contextDependencies":[],"result":["/**\r\n* @license\r\n* Copyright Google Inc. All Rights Reserved.\r\n*\r\n* Use of this source code is governed by an MIT-style license that can be\r\n* found in the LICENSE file at https://angular.io/license\r\n*/\r\n(function (global, factory) {\r\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory() :\r\n\ttypeof define === 'function' && define.amd ? define(factory) :\r\n\t(factory());\r\n}(this, (function () { 'use strict';\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar Zone$1 = (function (global) {\r\n    if (global['Zone']) {\r\n        throw new Error('Zone already loaded.');\r\n    }\r\n    var NO_ZONE = { name: 'NO ZONE' };\r\n    var notScheduled = 'notScheduled', scheduling = 'scheduling', scheduled = 'scheduled', running = 'running', canceling = 'canceling', unknown = 'unknown';\r\n    var microTask = 'microTask', macroTask = 'macroTask', eventTask = 'eventTask';\r\n    var Zone = (function () {\r\n        function Zone(parent, zoneSpec) {\r\n            this._properties = null;\r\n            this._parent = parent;\r\n            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';\r\n            this._properties = zoneSpec && zoneSpec.properties || {};\r\n            this._zoneDelegate =\r\n                new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);\r\n        }\r\n        Zone.assertZonePatched = function () {\r\n            if (global.Promise !== ZoneAwarePromise) {\r\n                throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' +\r\n                    'has been overwritten.\\n' +\r\n                    'Most likely cause is that a Promise polyfill has been loaded ' +\r\n                    'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' +\r\n                    'If you must load one, do so before loading zone.js.)');\r\n            }\r\n        };\r\n        Object.defineProperty(Zone, \"root\", {\r\n            get: function () {\r\n                var zone = Zone.current;\r\n                while (zone.parent) {\r\n                    zone = zone.parent;\r\n                }\r\n                return zone;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Zone, \"current\", {\r\n            get: function () {\r\n                return _currentZoneFrame.zone;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        \r\n        Object.defineProperty(Zone, \"currentTask\", {\r\n            get: function () {\r\n                return _currentTask;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        \r\n        Object.defineProperty(Zone.prototype, \"parent\", {\r\n            get: function () {\r\n                return this._parent;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        \r\n        Object.defineProperty(Zone.prototype, \"name\", {\r\n            get: function () {\r\n                return this._name;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        \r\n        Zone.prototype.get = function (key) {\r\n            var zone = this.getZoneWith(key);\r\n            if (zone)\r\n                return zone._properties[key];\r\n        };\r\n        Zone.prototype.getZoneWith = function (key) {\r\n            var current = this;\r\n            while (current) {\r\n                if (current._properties.hasOwnProperty(key)) {\r\n                    return current;\r\n                }\r\n                current = current._parent;\r\n            }\r\n            return null;\r\n        };\r\n        Zone.prototype.fork = function (zoneSpec) {\r\n            if (!zoneSpec)\r\n                throw new Error('ZoneSpec required!');\r\n            return this._zoneDelegate.fork(this, zoneSpec);\r\n        };\r\n        Zone.prototype.wrap = function (callback, source) {\r\n            if (typeof callback !== 'function') {\r\n                throw new Error('Expecting function got: ' + callback);\r\n            }\r\n            var _callback = this._zoneDelegate.intercept(this, callback, source);\r\n            var zone = this;\r\n            return function () {\r\n                return zone.runGuarded(_callback, this, arguments, source);\r\n            };\r\n        };\r\n        Zone.prototype.run = function (callback, applyThis, applyArgs, source) {\r\n            if (applyThis === void 0) { applyThis = undefined; }\r\n            if (applyArgs === void 0) { applyArgs = null; }\r\n            if (source === void 0) { source = null; }\r\n            _currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);\r\n            try {\r\n                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\r\n            }\r\n            finally {\r\n                _currentZoneFrame = _currentZoneFrame.parent;\r\n            }\r\n        };\r\n        Zone.prototype.runGuarded = function (callback, applyThis, applyArgs, source) {\r\n            if (applyThis === void 0) { applyThis = null; }\r\n            if (applyArgs === void 0) { applyArgs = null; }\r\n            if (source === void 0) { source = null; }\r\n            _currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);\r\n            try {\r\n                try {\r\n                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\r\n                }\r\n                catch (error) {\r\n                    if (this._zoneDelegate.handleError(this, error)) {\r\n                        throw error;\r\n                    }\r\n                }\r\n            }\r\n            finally {\r\n                _currentZoneFrame = _currentZoneFrame.parent;\r\n            }\r\n        };\r\n        Zone.prototype.runTask = function (task, applyThis, applyArgs) {\r\n            if (task.zone != this)\r\n                throw new Error('A task can only be run in the zone of creation! (Creation: ' +\r\n                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');\r\n            var reEntryGuard = task.state != running;\r\n            reEntryGuard && task._transitionTo(running, scheduled);\r\n            task.runCount++;\r\n            var previousTask = _currentTask;\r\n            _currentTask = task;\r\n            _currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);\r\n            try {\r\n                if (task.type == macroTask && task.data && !task.data.isPeriodic) {\r\n                    task.cancelFn = null;\r\n                }\r\n                try {\r\n                    return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);\r\n                }\r\n                catch (error) {\r\n                    if (this._zoneDelegate.handleError(this, error)) {\r\n                        throw error;\r\n                    }\r\n                }\r\n            }\r\n            finally {\r\n                // if the task's state is notScheduled or unknown, then it has already been cancelled\r\n                // we should not reset the state to scheduled\r\n                if (task.state !== notScheduled && task.state !== unknown) {\r\n                    if (task.type == eventTask || (task.data && task.data.isPeriodic)) {\r\n                        reEntryGuard && task._transitionTo(scheduled, running);\r\n                    }\r\n                    else {\r\n                        task.runCount = 0;\r\n                        this._updateTaskCount(task, -1);\r\n                        reEntryGuard &&\r\n                            task._transitionTo(notScheduled, running, notScheduled);\r\n                    }\r\n                }\r\n                _currentZoneFrame = _currentZoneFrame.parent;\r\n                _currentTask = previousTask;\r\n            }\r\n        };\r\n        Zone.prototype.scheduleTask = function (task) {\r\n            if (task.zone && task.zone !== this) {\r\n                // check if the task was rescheduled, the newZone\r\n                // should not be the children of the original zone\r\n                var newZone = this;\r\n                while (newZone) {\r\n                    if (newZone === task.zone) {\r\n                        throw Error(\"can not reschedule task to \" + this\r\n                            .name + \" which is descendants of the original zone \" + task.zone.name);\r\n                    }\r\n                    newZone = newZone.parent;\r\n                }\r\n            }\r\n            task._transitionTo(scheduling, notScheduled);\r\n            var zoneDelegates = [];\r\n            task._zoneDelegates = zoneDelegates;\r\n            task._zone = this;\r\n            try {\r\n                task = this._zoneDelegate.scheduleTask(this, task);\r\n            }\r\n            catch (err) {\r\n                // should set task's state to unknown when scheduleTask throw error\r\n                // because the err may from reschedule, so the fromState maybe notScheduled\r\n                task._transitionTo(unknown, scheduling, notScheduled);\r\n                // TODO: @JiaLiPassion, should we check the result from handleError?\r\n                this._zoneDelegate.handleError(this, err);\r\n                throw err;\r\n            }\r\n            if (task._zoneDelegates === zoneDelegates) {\r\n                // we have to check because internally the delegate can reschedule the task.\r\n                this._updateTaskCount(task, 1);\r\n            }\r\n            if (task.state == scheduling) {\r\n                task._transitionTo(scheduled, scheduling);\r\n            }\r\n            return task;\r\n        };\r\n        Zone.prototype.scheduleMicroTask = function (source, callback, data, customSchedule) {\r\n            return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, null));\r\n        };\r\n        Zone.prototype.scheduleMacroTask = function (source, callback, data, customSchedule, customCancel) {\r\n            return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));\r\n        };\r\n        Zone.prototype.scheduleEventTask = function (source, callback, data, customSchedule, customCancel) {\r\n            return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));\r\n        };\r\n        Zone.prototype.cancelTask = function (task) {\r\n            if (task.zone != this)\r\n                throw new Error('A task can only be cancelled in the zone of creation! (Creation: ' +\r\n                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');\r\n            task._transitionTo(canceling, scheduled, running);\r\n            try {\r\n                this._zoneDelegate.cancelTask(this, task);\r\n            }\r\n            catch (err) {\r\n                // if error occurs when cancelTask, transit the state to unknown\r\n                task._transitionTo(unknown, canceling);\r\n                this._zoneDelegate.handleError(this, err);\r\n                throw err;\r\n            }\r\n            this._updateTaskCount(task, -1);\r\n            task._transitionTo(notScheduled, canceling);\r\n            task.runCount = 0;\r\n            return task;\r\n        };\r\n        Zone.prototype._updateTaskCount = function (task, count) {\r\n            var zoneDelegates = task._zoneDelegates;\r\n            if (count == -1) {\r\n                task._zoneDelegates = null;\r\n            }\r\n            for (var i = 0; i < zoneDelegates.length; i++) {\r\n                zoneDelegates[i]._updateTaskCount(task.type, count);\r\n            }\r\n        };\r\n        return Zone;\r\n    }());\r\n    Zone.__symbol__ = __symbol__;\r\n    var DELEGATE_ZS = {\r\n        name: '',\r\n        onHasTask: function (delegate, _, target, hasTaskState) {\r\n            return delegate.hasTask(target, hasTaskState);\r\n        },\r\n        onScheduleTask: function (delegate, _, target, task) {\r\n            return delegate.scheduleTask(target, task);\r\n        },\r\n        onInvokeTask: function (delegate, _, target, task, applyThis, applyArgs) { return delegate.invokeTask(target, task, applyThis, applyArgs); },\r\n        onCancelTask: function (delegate, _, target, task) {\r\n            return delegate.cancelTask(target, task);\r\n        }\r\n    };\r\n    var ZoneDelegate = (function () {\r\n        function ZoneDelegate(zone, parentDelegate, zoneSpec) {\r\n            this._taskCounts = { 'microTask': 0, 'macroTask': 0, 'eventTask': 0 };\r\n            this.zone = zone;\r\n            this._parentDelegate = parentDelegate;\r\n            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);\r\n            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);\r\n            this._forkCurrZone = zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate.zone);\r\n            this._interceptZS =\r\n                zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);\r\n            this._interceptDlgt =\r\n                zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);\r\n            this._interceptCurrZone =\r\n                zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate.zone);\r\n            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);\r\n            this._invokeDlgt =\r\n                zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);\r\n            this._invokeCurrZone = zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate.zone);\r\n            this._handleErrorZS =\r\n                zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);\r\n            this._handleErrorDlgt =\r\n                zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);\r\n            this._handleErrorCurrZone =\r\n                zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate.zone);\r\n            this._scheduleTaskZS =\r\n                zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);\r\n            this._scheduleTaskDlgt =\r\n                zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);\r\n            this._scheduleTaskCurrZone =\r\n                zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate.zone);\r\n            this._invokeTaskZS =\r\n                zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);\r\n            this._invokeTaskDlgt =\r\n                zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);\r\n            this._invokeTaskCurrZone =\r\n                zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate.zone);\r\n            this._cancelTaskZS =\r\n                zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);\r\n            this._cancelTaskDlgt =\r\n                zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);\r\n            this._cancelTaskCurrZone =\r\n                zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate.zone);\r\n            this._hasTaskZS = null;\r\n            this._hasTaskDlgt = null;\r\n            this._hasTaskDlgtOwner = null;\r\n            this._hasTaskCurrZone = null;\r\n            var zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;\r\n            var parentHasTask = parentDelegate && parentDelegate._hasTaskZS;\r\n            if (zoneSpecHasTask || parentHasTask) {\r\n                // If we need to report hasTask, than this ZS needs to do ref counting on tasks. In such\r\n                // a case all task related interceptors must go through this ZD. We can't short circuit it.\r\n                this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;\r\n                this._hasTaskDlgt = parentDelegate;\r\n                this._hasTaskDlgtOwner = this;\r\n                this._hasTaskCurrZone = zone;\r\n                if (!zoneSpec.onScheduleTask) {\r\n                    this._scheduleTaskZS = DELEGATE_ZS;\r\n                    this._scheduleTaskDlgt = parentDelegate;\r\n                    this._scheduleTaskCurrZone = this.zone;\r\n                }\r\n                if (!zoneSpec.onInvokeTask) {\r\n                    this._invokeTaskZS = DELEGATE_ZS;\r\n                    this._invokeTaskDlgt = parentDelegate;\r\n                    this._invokeTaskCurrZone = this.zone;\r\n                }\r\n                if (!zoneSpec.onCancelTask) {\r\n                    this._cancelTaskZS = DELEGATE_ZS;\r\n                    this._cancelTaskDlgt = parentDelegate;\r\n                    this._cancelTaskCurrZone = this.zone;\r\n                }\r\n            }\r\n        }\r\n        ZoneDelegate.prototype.fork = function (targetZone, zoneSpec) {\r\n            return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) :\r\n                new Zone(targetZone, zoneSpec);\r\n        };\r\n        ZoneDelegate.prototype.intercept = function (targetZone, callback, source) {\r\n            return this._interceptZS ?\r\n                this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) :\r\n                callback;\r\n        };\r\n        ZoneDelegate.prototype.invoke = function (targetZone, callback, applyThis, applyArgs, source) {\r\n            return this._invokeZS ?\r\n                this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) :\r\n                callback.apply(applyThis, applyArgs);\r\n        };\r\n        ZoneDelegate.prototype.handleError = function (targetZone, error) {\r\n            return this._handleErrorZS ?\r\n                this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) :\r\n                true;\r\n        };\r\n        ZoneDelegate.prototype.scheduleTask = function (targetZone, task) {\r\n            var returnTask = task;\r\n            if (this._scheduleTaskZS) {\r\n                if (this._hasTaskZS) {\r\n                    returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);\r\n                }\r\n                returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);\r\n                if (!returnTask)\r\n                    returnTask = task;\r\n            }\r\n            else {\r\n                if (task.scheduleFn) {\r\n                    task.scheduleFn(task);\r\n                }\r\n                else if (task.type == microTask) {\r\n                    scheduleMicroTask(task);\r\n                }\r\n                else {\r\n                    throw new Error('Task is missing scheduleFn.');\r\n                }\r\n            }\r\n            return returnTask;\r\n        };\r\n        ZoneDelegate.prototype.invokeTask = function (targetZone, task, applyThis, applyArgs) {\r\n            return this._invokeTaskZS ?\r\n                this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) :\r\n                task.callback.apply(applyThis, applyArgs);\r\n        };\r\n        ZoneDelegate.prototype.cancelTask = function (targetZone, task) {\r\n            var value;\r\n            if (this._cancelTaskZS) {\r\n                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);\r\n            }\r\n            else {\r\n                if (!task.cancelFn) {\r\n                    throw Error('Task is not cancelable');\r\n                }\r\n                value = task.cancelFn(task);\r\n            }\r\n            return value;\r\n        };\r\n        ZoneDelegate.prototype.hasTask = function (targetZone, isEmpty) {\r\n            // hasTask should not throw error so other ZoneDelegate\r\n            // can still trigger hasTask callback\r\n            try {\r\n                return this._hasTaskZS &&\r\n                    this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);\r\n            }\r\n            catch (err) {\r\n            }\r\n        };\r\n        ZoneDelegate.prototype._updateTaskCount = function (type, count) {\r\n            var counts = this._taskCounts;\r\n            var prev = counts[type];\r\n            var next = counts[type] = prev + count;\r\n            if (next < 0) {\r\n                throw new Error('More tasks executed then were scheduled.');\r\n            }\r\n            if (prev == 0 || next == 0) {\r\n                var isEmpty = {\r\n                    microTask: counts.microTask > 0,\r\n                    macroTask: counts.macroTask > 0,\r\n                    eventTask: counts.eventTask > 0,\r\n                    change: type\r\n                };\r\n                // TODO(misko): what should happen if it throws?\r\n                this.hasTask(this.zone, isEmpty);\r\n            }\r\n        };\r\n        return ZoneDelegate;\r\n    }());\r\n    var ZoneTask = (function () {\r\n        function ZoneTask(type, source, callback, options, scheduleFn, cancelFn) {\r\n            this._zone = null;\r\n            this.runCount = 0;\r\n            this._zoneDelegates = null;\r\n            this._state = 'notScheduled';\r\n            this.type = type;\r\n            this.source = source;\r\n            this.data = options;\r\n            this.scheduleFn = scheduleFn;\r\n            this.cancelFn = cancelFn;\r\n            this.callback = callback;\r\n            var self = this;\r\n            this.invoke = function () {\r\n                _numberOfNestedTaskFrames++;\r\n                try {\r\n                    self.runCount++;\r\n                    return self.zone.runTask(self, this, arguments);\r\n                }\r\n                finally {\r\n                    if (_numberOfNestedTaskFrames == 1) {\r\n                        drainMicroTaskQueue();\r\n                    }\r\n                    _numberOfNestedTaskFrames--;\r\n                }\r\n            };\r\n        }\r\n        Object.defineProperty(ZoneTask.prototype, \"zone\", {\r\n            get: function () {\r\n                return this._zone;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(ZoneTask.prototype, \"state\", {\r\n            get: function () {\r\n                return this._state;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        ZoneTask.prototype.cancelScheduleRequest = function () {\r\n            this._transitionTo(notScheduled, scheduling);\r\n        };\r\n        ZoneTask.prototype._transitionTo = function (toState, fromState1, fromState2) {\r\n            if (this._state === fromState1 || this._state === fromState2) {\r\n                this._state = toState;\r\n                if (toState == notScheduled) {\r\n                    this._zoneDelegates = null;\r\n                }\r\n            }\r\n            else {\r\n                throw new Error(this.type + \" '\" + this.source + \"': can not transition to '\" + toState + \"', expecting state '\" + fromState1 + \"'\" + (fromState2 ?\r\n                    ' or \\'' + fromState2 + '\\'' :\r\n                    '') + \", was '\" + this._state + \"'.\");\r\n            }\r\n        };\r\n        ZoneTask.prototype.toString = function () {\r\n            if (this.data && typeof this.data.handleId !== 'undefined') {\r\n                return this.data.handleId;\r\n            }\r\n            else {\r\n                return Object.prototype.toString.call(this);\r\n            }\r\n        };\r\n        // add toJSON method to prevent cyclic error when\r\n        // call JSON.stringify(zoneTask)\r\n        ZoneTask.prototype.toJSON = function () {\r\n            return {\r\n                type: this.type,\r\n                state: this.state,\r\n                source: this.source,\r\n                data: this.data,\r\n                zone: this.zone.name,\r\n                invoke: this.invoke,\r\n                scheduleFn: this.scheduleFn,\r\n                cancelFn: this.cancelFn,\r\n                runCount: this.runCount,\r\n                callback: this.callback\r\n            };\r\n        };\r\n        return ZoneTask;\r\n    }());\r\n    var ZoneFrame = (function () {\r\n        function ZoneFrame(parent, zone) {\r\n            this.parent = parent;\r\n            this.zone = zone;\r\n        }\r\n        return ZoneFrame;\r\n    }());\r\n    function __symbol__(name) {\r\n        return '__zone_symbol__' + name;\r\n    }\r\n    \r\n    var symbolSetTimeout = __symbol__('setTimeout');\r\n    var symbolPromise = __symbol__('Promise');\r\n    var symbolThen = __symbol__('then');\r\n    var _currentZoneFrame = new ZoneFrame(null, new Zone(null, null));\r\n    var _currentTask = null;\r\n    var _microTaskQueue = [];\r\n    var _isDrainingMicrotaskQueue = false;\r\n    var _uncaughtPromiseErrors = [];\r\n    var _numberOfNestedTaskFrames = 0;\r\n    function scheduleQueueDrain() {\r\n        // if we are not running in any task, and there has not been anything scheduled\r\n        // we must bootstrap the initial task creation by manually scheduling the drain\r\n        if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {\r\n            // We are not running in Task, so we need to kickstart the microtask queue.\r\n            if (global[symbolPromise]) {\r\n                global[symbolPromise].resolve(0)[symbolThen](drainMicroTaskQueue);\r\n            }\r\n            else {\r\n                global[symbolSetTimeout](drainMicroTaskQueue, 0);\r\n            }\r\n        }\r\n    }\r\n    function scheduleMicroTask(task) {\r\n        scheduleQueueDrain();\r\n        _microTaskQueue.push(task);\r\n    }\r\n    function consoleError(e) {\r\n        if (Zone[__symbol__('ignoreConsoleErrorUncaughtError')]) {\r\n            return;\r\n        }\r\n        var rejection = e && e.rejection;\r\n        if (rejection) {\r\n            console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);\r\n        }\r\n        console.error(e);\r\n    }\r\n    function handleUnhandledRejection(e) {\r\n        consoleError(e);\r\n        try {\r\n            var handler = Zone[__symbol__('unhandledPromiseRejectionHandler')];\r\n            if (handler && typeof handler === 'function') {\r\n                handler.apply(this, [e]);\r\n            }\r\n        }\r\n        catch (err) {\r\n        }\r\n    }\r\n    function drainMicroTaskQueue() {\r\n        if (!_isDrainingMicrotaskQueue) {\r\n            _isDrainingMicrotaskQueue = true;\r\n            while (_microTaskQueue.length) {\r\n                var queue = _microTaskQueue;\r\n                _microTaskQueue = [];\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    var task = queue[i];\r\n                    try {\r\n                        task.zone.runTask(task, null, null);\r\n                    }\r\n                    catch (error) {\r\n                        consoleError(error);\r\n                    }\r\n                }\r\n            }\r\n            while (_uncaughtPromiseErrors.length) {\r\n                var _loop_1 = function () {\r\n                    var uncaughtPromiseError = _uncaughtPromiseErrors.shift();\r\n                    try {\r\n                        uncaughtPromiseError.zone.runGuarded(function () {\r\n                            throw uncaughtPromiseError;\r\n                        });\r\n                    }\r\n                    catch (error) {\r\n                        handleUnhandledRejection(error);\r\n                    }\r\n                };\r\n                while (_uncaughtPromiseErrors.length) {\r\n                    _loop_1();\r\n                }\r\n            }\r\n            _isDrainingMicrotaskQueue = false;\r\n        }\r\n    }\r\n    function isThenable(value) {\r\n        return value && value.then;\r\n    }\r\n    function forwardResolution(value) {\r\n        return value;\r\n    }\r\n    function forwardRejection(rejection) {\r\n        return ZoneAwarePromise.reject(rejection);\r\n    }\r\n    var symbolState = __symbol__('state');\r\n    var symbolValue = __symbol__('value');\r\n    var source = 'Promise.then';\r\n    var UNRESOLVED = null;\r\n    var RESOLVED = true;\r\n    var REJECTED = false;\r\n    var REJECTED_NO_CATCH = 0;\r\n    function makeResolver(promise, state) {\r\n        return function (v) {\r\n            try {\r\n                resolvePromise(promise, state, v);\r\n            }\r\n            catch (err) {\r\n                resolvePromise(promise, false, err);\r\n            }\r\n            // Do not return value or you will break the Promise spec.\r\n        };\r\n    }\r\n    var once = function () {\r\n        var wasCalled = false;\r\n        return function wrapper(wrappedFunction) {\r\n            return function () {\r\n                if (wasCalled) {\r\n                    return;\r\n                }\r\n                wasCalled = true;\r\n                wrappedFunction.apply(null, arguments);\r\n            };\r\n        };\r\n    };\r\n    // Promise Resolution\r\n    function resolvePromise(promise, state, value) {\r\n        var onceWrapper = once();\r\n        if (promise === value) {\r\n            throw new TypeError('Promise resolved with itself');\r\n        }\r\n        if (promise[symbolState] === UNRESOLVED) {\r\n            // should only get value.then once based on promise spec.\r\n            var then = null;\r\n            try {\r\n                if (typeof value === 'object' || typeof value === 'function') {\r\n                    then = value && value.then;\r\n                }\r\n            }\r\n            catch (err) {\r\n                onceWrapper(function () {\r\n                    resolvePromise(promise, false, err);\r\n                })();\r\n                return promise;\r\n            }\r\n            // if (value instanceof ZoneAwarePromise) {\r\n            if (state !== REJECTED && value instanceof ZoneAwarePromise &&\r\n                value.hasOwnProperty(symbolState) && value.hasOwnProperty(symbolValue) &&\r\n                value[symbolState] !== UNRESOLVED) {\r\n                clearRejectedNoCatch(value);\r\n                resolvePromise(promise, value[symbolState], value[symbolValue]);\r\n            }\r\n            else if (state !== REJECTED && typeof then === 'function') {\r\n                try {\r\n                    then.apply(value, [\r\n                        onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false))\r\n                    ]);\r\n                }\r\n                catch (err) {\r\n                    onceWrapper(function () {\r\n                        resolvePromise(promise, false, err);\r\n                    })();\r\n                }\r\n            }\r\n            else {\r\n                promise[symbolState] = state;\r\n                var queue = promise[symbolValue];\r\n                promise[symbolValue] = value;\r\n                // record task information in value when error occurs, so we can\r\n                // do some additional work such as render longStackTrace\r\n                if (state === REJECTED && value instanceof Error) {\r\n                    value[__symbol__('currentTask')] = Zone.currentTask;\r\n                }\r\n                for (var i = 0; i < queue.length;) {\r\n                    scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);\r\n                }\r\n                if (queue.length == 0 && state == REJECTED) {\r\n                    promise[symbolState] = REJECTED_NO_CATCH;\r\n                    try {\r\n                        throw new Error('Uncaught (in promise): ' + value +\r\n                            (value && value.stack ? '\\n' + value.stack : ''));\r\n                    }\r\n                    catch (err) {\r\n                        var error_1 = err;\r\n                        error_1.rejection = value;\r\n                        error_1.promise = promise;\r\n                        error_1.zone = Zone.current;\r\n                        error_1.task = Zone.currentTask;\r\n                        _uncaughtPromiseErrors.push(error_1);\r\n                        scheduleQueueDrain();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Resolving an already resolved promise is a noop.\r\n        return promise;\r\n    }\r\n    function clearRejectedNoCatch(promise) {\r\n        if (promise[symbolState] === REJECTED_NO_CATCH) {\r\n            // if the promise is rejected no catch status\r\n            // and queue.length > 0, means there is a error handler\r\n            // here to handle the rejected promise, we should trigger\r\n            // windows.rejectionhandled eventHandler or nodejs rejectionHandled\r\n            // eventHandler\r\n            try {\r\n                var handler = Zone[__symbol__('rejectionHandledHandler')];\r\n                if (handler && typeof handler === 'function') {\r\n                    handler.apply(this, [{ rejection: promise[symbolValue], promise: promise }]);\r\n                }\r\n            }\r\n            catch (err) {\r\n            }\r\n            promise[symbolState] = REJECTED;\r\n            for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {\r\n                if (promise === _uncaughtPromiseErrors[i].promise) {\r\n                    _uncaughtPromiseErrors.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {\r\n        clearRejectedNoCatch(promise);\r\n        var delegate = promise[symbolState] ?\r\n            (typeof onFulfilled === 'function') ? onFulfilled : forwardResolution :\r\n            (typeof onRejected === 'function') ? onRejected : forwardRejection;\r\n        zone.scheduleMicroTask(source, function () {\r\n            try {\r\n                resolvePromise(chainPromise, true, zone.run(delegate, undefined, [promise[symbolValue]]));\r\n            }\r\n            catch (error) {\r\n                resolvePromise(chainPromise, false, error);\r\n            }\r\n        });\r\n    }\r\n    var ZoneAwarePromise = (function () {\r\n        function ZoneAwarePromise(executor) {\r\n            var promise = this;\r\n            if (!(promise instanceof ZoneAwarePromise)) {\r\n                throw new Error('Must be an instanceof Promise.');\r\n            }\r\n            promise[symbolState] = UNRESOLVED;\r\n            promise[symbolValue] = []; // queue;\r\n            try {\r\n                executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));\r\n            }\r\n            catch (error) {\r\n                resolvePromise(promise, false, error);\r\n            }\r\n        }\r\n        ZoneAwarePromise.toString = function () {\r\n            return 'function ZoneAwarePromise() { [native code] }';\r\n        };\r\n        ZoneAwarePromise.resolve = function (value) {\r\n            return resolvePromise(new this(null), RESOLVED, value);\r\n        };\r\n        ZoneAwarePromise.reject = function (error) {\r\n            return resolvePromise(new this(null), REJECTED, error);\r\n        };\r\n        ZoneAwarePromise.race = function (values) {\r\n            var resolve;\r\n            var reject;\r\n            var promise = new this(function (res, rej) {\r\n                _a = [res, rej], resolve = _a[0], reject = _a[1];\r\n                var _a;\r\n            });\r\n            function onResolve(value) {\r\n                promise && (promise = null || resolve(value));\r\n            }\r\n            function onReject(error) {\r\n                promise && (promise = null || reject(error));\r\n            }\r\n            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\r\n                var value = values_1[_i];\r\n                if (!isThenable(value)) {\r\n                    value = this.resolve(value);\r\n                }\r\n                value.then(onResolve, onReject);\r\n            }\r\n            return promise;\r\n        };\r\n        ZoneAwarePromise.all = function (values) {\r\n            var resolve;\r\n            var reject;\r\n            var promise = new this(function (res, rej) {\r\n                resolve = res;\r\n                reject = rej;\r\n            });\r\n            var count = 0;\r\n            var resolvedValues = [];\r\n            for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {\r\n                var value = values_2[_i];\r\n                if (!isThenable(value)) {\r\n                    value = this.resolve(value);\r\n                }\r\n                value.then((function (index) { return function (value) {\r\n                    resolvedValues[index] = value;\r\n                    count--;\r\n                    if (!count) {\r\n                        resolve(resolvedValues);\r\n                    }\r\n                }; })(count), reject);\r\n                count++;\r\n            }\r\n            if (!count)\r\n                resolve(resolvedValues);\r\n            return promise;\r\n        };\r\n        ZoneAwarePromise.prototype.then = function (onFulfilled, onRejected) {\r\n            var chainPromise = new this.constructor(null);\r\n            var zone = Zone.current;\r\n            if (this[symbolState] == UNRESOLVED) {\r\n                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);\r\n            }\r\n            else {\r\n                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);\r\n            }\r\n            return chainPromise;\r\n        };\r\n        ZoneAwarePromise.prototype.catch = function (onRejected) {\r\n            return this.then(null, onRejected);\r\n        };\r\n        return ZoneAwarePromise;\r\n    }());\r\n    // Protect against aggressive optimizers dropping seemingly unused properties.\r\n    // E.g. Closure Compiler in advanced mode.\r\n    ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;\r\n    ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;\r\n    ZoneAwarePromise['race'] = ZoneAwarePromise.race;\r\n    ZoneAwarePromise['all'] = ZoneAwarePromise.all;\r\n    var NativePromise = global[symbolPromise] = global['Promise'];\r\n    global['Promise'] = ZoneAwarePromise;\r\n    var symbolThenPatched = __symbol__('thenPatched');\r\n    function patchThen(Ctor) {\r\n        var proto = Ctor.prototype;\r\n        var originalThen = proto.then;\r\n        // Keep a reference to the original method.\r\n        proto[symbolThen] = originalThen;\r\n        Ctor.prototype.then = function (onResolve, onReject) {\r\n            var _this = this;\r\n            var wrapped = new ZoneAwarePromise(function (resolve, reject) {\r\n                originalThen.call(_this, resolve, reject);\r\n            });\r\n            return wrapped.then(onResolve, onReject);\r\n        };\r\n        Ctor[symbolThenPatched] = true;\r\n    }\r\n    function zoneify(fn) {\r\n        return function () {\r\n            var resultPromise = fn.apply(this, arguments);\r\n            if (resultPromise instanceof ZoneAwarePromise) {\r\n                return resultPromise;\r\n            }\r\n            var Ctor = resultPromise.constructor;\r\n            if (!Ctor[symbolThenPatched]) {\r\n                patchThen(Ctor);\r\n            }\r\n            return resultPromise;\r\n        };\r\n    }\r\n    if (NativePromise) {\r\n        patchThen(NativePromise);\r\n        var fetch_1 = global['fetch'];\r\n        if (typeof fetch_1 == 'function') {\r\n            global['fetch'] = zoneify(fetch_1);\r\n        }\r\n    }\r\n    // This is not part of public API, but it is usefull for tests, so we expose it.\r\n    Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;\r\n    /*\r\n     * This code patches Error so that:\r\n     *   - It ignores un-needed stack frames.\r\n     *   - It Shows the associated Zone for reach frame.\r\n     */\r\n    var FrameType;\r\n    (function (FrameType) {\r\n        /// Skip this frame when printing out stack\r\n        FrameType[FrameType[\"blackList\"] = 0] = \"blackList\";\r\n        /// This frame marks zone transition\r\n        FrameType[FrameType[\"transition\"] = 1] = \"transition\";\r\n    })(FrameType || (FrameType = {}));\r\n    var NativeError = global[__symbol__('Error')] = global.Error;\r\n    // Store the frames which should be removed from the stack frames\r\n    var blackListedStackFrames = {};\r\n    // We must find the frame where Error was created, otherwise we assume we don't understand stack\r\n    // the frame will be an array, because Error with new or without new will\r\n    // have different stack frames.\r\n    var zoneAwareErrorStartFrames = [];\r\n    global.Error = ZoneAwareError;\r\n    var stackRewrite = 'stackRewrite';\r\n    // some functions are not easily to be detected here,\r\n    // for example Timeout.ZoneTask.invoke, if we want to detect those functions\r\n    // by detect zone, we have to run all patched APIs, it is too risky\r\n    // so for those functions, just check whether the stack contains the string or not.\r\n    var otherZoneAwareFunctionNames = [\r\n        'ZoneTask.invoke', 'ZoneAware', 'getStacktraceWithUncaughtError', 'new LongStackTrace',\r\n        'long-stack-trace'\r\n    ];\r\n    function attachZoneAndRemoveInternalZoneFrames(error) {\r\n        // Save original stack trace\r\n        error.originalStack = error.stack;\r\n        // Process the stack trace and rewrite the frames.\r\n        if (ZoneAwareError[stackRewrite] && error.originalStack) {\r\n            var frames_1 = error.originalStack.split('\\n');\r\n            var zoneFrame = _currentZoneFrame;\r\n            var i_1 = 0;\r\n            // Find the first frame\r\n            while (i_1 < frames_1.length &&\r\n                zoneAwareErrorStartFrames.filter(function (zf) { return zf.trim() === frames_1[i_1].trim(); }).length === 0) {\r\n                i_1++;\r\n            }\r\n            var _loop_2 = function () {\r\n                // trim here because blackListedStackFrames store the trimmed frames\r\n                var frame = frames_1[i_1].trim();\r\n                if (frame) {\r\n                    var frameType = blackListedStackFrames.hasOwnProperty(frame) && blackListedStackFrames[frame];\r\n                    if (frameType === FrameType.blackList) {\r\n                        frames_1.splice(i_1, 1);\r\n                        i_1--;\r\n                    }\r\n                    else if (otherZoneAwareFunctionNames\r\n                        .filter(function (f) { return frame.toLowerCase().indexOf(f.toLowerCase()) !== -1; })\r\n                        .length > 0) {\r\n                        frames_1.splice(i_1, 1);\r\n                        i_1--;\r\n                    }\r\n                    else if (frameType === FrameType.transition) {\r\n                        if (zoneFrame.parent) {\r\n                            // This is the special frame where zone changed. Print and process it accordingly\r\n                            zoneFrame = zoneFrame.parent;\r\n                        }\r\n                        else {\r\n                            zoneFrame = null;\r\n                        }\r\n                        frames_1.splice(i_1, 1);\r\n                        i_1--;\r\n                    }\r\n                    else {\r\n                        frames_1[i_1] += \" [\" + zoneFrame.zone.name + \"]\";\r\n                    }\r\n                }\r\n            };\r\n            for (; i_1 < frames_1.length && zoneFrame; i_1++) {\r\n                _loop_2();\r\n            }\r\n            var finalStack = frames_1.join('\\n');\r\n            try {\r\n                error.stack = error.zoneAwareStack = finalStack;\r\n            }\r\n            catch (nonWritableErr) {\r\n                // in some browser, the error.stack is readonly such as PhantomJS\r\n                // so we need to store the stack frames to zoneAwareError directly\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * This is ZoneAwareError which processes the stack frame and cleans up extra frames as well as\r\n     * adds zone information to it.\r\n     */\r\n    function ZoneAwareError() {\r\n        // We always have to return native error otherwise the browser console will not work.\r\n        var error = NativeError.apply(this, arguments);\r\n        if (!error.stack) {\r\n            // in IE, the error.stack will be undefined\r\n            // when error was constructed, it will only\r\n            // be available when throw\r\n            try {\r\n                throw error;\r\n            }\r\n            catch (err) {\r\n                error = err;\r\n            }\r\n        }\r\n        // 1. attach zone information to stack frame\r\n        // 2. remove zone internal stack frames\r\n        attachZoneAndRemoveInternalZoneFrames(error);\r\n        return error;\r\n    }\r\n    // Copy the prototype so that instanceof operator works as expected\r\n    ZoneAwareError.prototype = NativeError.prototype;\r\n    ZoneAwareError[Zone.__symbol__('blacklistedStackFrames')] = blackListedStackFrames;\r\n    ZoneAwareError[stackRewrite] = false;\r\n    // those properties need special handling\r\n    var specialPropertyNames = ['stackTraceLimit', 'captureStackTrace', 'prepareStackTrace'];\r\n    // those properties of NativeError should be set to ZoneAwareError\r\n    var nativeErrorProperties = Object.keys(NativeError);\r\n    if (nativeErrorProperties) {\r\n        nativeErrorProperties.forEach(function (prop) {\r\n            if (specialPropertyNames.filter(function (sp) { return sp === prop; }).length === 0) {\r\n                Object.defineProperty(ZoneAwareError, prop, {\r\n                    get: function () {\r\n                        return NativeError[prop];\r\n                    },\r\n                    set: function (value) {\r\n                        NativeError[prop] = value;\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    if (NativeError.hasOwnProperty('stackTraceLimit')) {\r\n        // Extend default stack limit as we will be removing few frames.\r\n        NativeError.stackTraceLimit = Math.max(NativeError.stackTraceLimit, 15);\r\n        // make sure that ZoneAwareError has the same property which forwards to NativeError.\r\n        Object.defineProperty(ZoneAwareError, 'stackTraceLimit', {\r\n            get: function () {\r\n                return NativeError.stackTraceLimit;\r\n            },\r\n            set: function (value) {\r\n                return NativeError.stackTraceLimit = value;\r\n            }\r\n        });\r\n    }\r\n    if (NativeError.hasOwnProperty('captureStackTrace')) {\r\n        Object.defineProperty(ZoneAwareError, 'captureStackTrace', {\r\n            // add named function here because we need to remove this\r\n            // stack frame when prepareStackTrace below\r\n            value: function zoneCaptureStackTrace(targetObject, constructorOpt) {\r\n                NativeError.captureStackTrace(targetObject, constructorOpt);\r\n            }\r\n        });\r\n    }\r\n    Object.defineProperty(ZoneAwareError, 'prepareStackTrace', {\r\n        get: function () {\r\n            return NativeError.prepareStackTrace;\r\n        },\r\n        set: function (value) {\r\n            if (!value || typeof value !== 'function') {\r\n                return NativeError.prepareStackTrace = value;\r\n            }\r\n            return NativeError.prepareStackTrace = function (error, structuredStackTrace) {\r\n                // remove additional stack information from ZoneAwareError.captureStackTrace\r\n                if (structuredStackTrace) {\r\n                    for (var i = 0; i < structuredStackTrace.length; i++) {\r\n                        var st = structuredStackTrace[i];\r\n                        // remove the first function which name is zoneCaptureStackTrace\r\n                        if (st.getFunctionName() === 'zoneCaptureStackTrace') {\r\n                            structuredStackTrace.splice(i, 1);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return value.apply(this, [error, structuredStackTrace]);\r\n            };\r\n        }\r\n    });\r\n    // Now we need to populate the `blacklistedStackFrames` as well as find the\r\n    // run/runGuraded/runTask frames. This is done by creating a detect zone and then threading\r\n    // the execution through all of the above methods so that we can look at the stack trace and\r\n    // find the frames of interest.\r\n    var detectZone = Zone.current.fork({\r\n        name: 'detect',\r\n        onInvoke: function (parentZoneDelegate, currentZone, targetZone, delegate, applyThis, applyArgs, source) {\r\n            // Here only so that it will show up in the stack frame so that it can be black listed.\r\n            return parentZoneDelegate.invoke(targetZone, delegate, applyThis, applyArgs, source);\r\n        },\r\n        onHandleError: function (parentZD, current, target, error) {\r\n            if (error.originalStack && Error === ZoneAwareError) {\r\n                var frames_2 = error.originalStack.split(/\\n/);\r\n                var runFrame = false, runGuardedFrame = false, runTaskFrame = false;\r\n                while (frames_2.length) {\r\n                    var frame = frames_2.shift();\r\n                    // On safari it is possible to have stack frame with no line number.\r\n                    // This check makes sure that we don't filter frames on name only (must have\r\n                    // linenumber)\r\n                    if (/:\\d+:\\d+/.test(frame)) {\r\n                        // Get rid of the path so that we don't accidentally find function name in path.\r\n                        // In chrome the separator is `(` and `@` in FF and safari\r\n                        // Chrome: at Zone.run (zone.js:100)\r\n                        // Chrome: at Zone.run (http://localhost:9876/base/build/lib/zone.js:100:24)\r\n                        // FireFox: Zone.prototype.run@http://localhost:9876/base/build/lib/zone.js:101:24\r\n                        // Safari: run@http://localhost:9876/base/build/lib/zone.js:101:24\r\n                        var fnName = frame.split('(')[0].split('@')[0];\r\n                        var frameType = FrameType.transition;\r\n                        if (fnName.indexOf('ZoneAwareError') !== -1) {\r\n                            // we found the ZoneAwareError start frame\r\n                            // the frame will be different when call Error(...)\r\n                            // and new Error(...), so we store them both\r\n                            zoneAwareErrorStartFrames.push(frame);\r\n                        }\r\n                        if (fnName.indexOf('runGuarded') !== -1) {\r\n                            runGuardedFrame = true;\r\n                        }\r\n                        else if (fnName.indexOf('runTask') !== -1) {\r\n                            runTaskFrame = true;\r\n                        }\r\n                        else if (fnName.indexOf('run') !== -1) {\r\n                            runFrame = true;\r\n                        }\r\n                        else {\r\n                            frameType = FrameType.blackList;\r\n                        }\r\n                        blackListedStackFrames[frame.trim()] = frameType;\r\n                        // Once we find all of the frames we can stop looking.\r\n                        if (runFrame && runGuardedFrame && runTaskFrame) {\r\n                            ZoneAwareError[stackRewrite] = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n    });\r\n    // carefully constructor a stack frame which contains all of the frames of interest which\r\n    // need to be detected and blacklisted.\r\n    // use this method to handle\r\n    // 1. IE issue, the error.stack can only be not undefined after throw\r\n    // 2. handle Error(...) without new options\r\n    var throwError = function (message, withNew) {\r\n        try {\r\n            if (withNew) {\r\n                throw new Error(message);\r\n            }\r\n            else {\r\n                throw Error(message);\r\n            }\r\n        }\r\n        catch (err) {\r\n            return err;\r\n        }\r\n    };\r\n    var nativeStackTraceLimit = NativeError.stackTraceLimit;\r\n    // in some system/browser, some additional stack frames\r\n    // will be generated (such as inline function)\r\n    // so the the stack frame to check ZoneAwareError Start\r\n    // maybe ignored because the frame's number will exceed\r\n    // stackTraceLimit, so we just set stackTraceLimit to 100\r\n    // and reset after all detect work is done.\r\n    NativeError.stackTraceLimit = 100;\r\n    var detectRunFn = function () {\r\n        detectZone.run(function () {\r\n            detectZone.runGuarded(function () {\r\n                throw throwError('blacklistStackFrames', true);\r\n            });\r\n        });\r\n    };\r\n    var detectRunWithoutNewFn = function () {\r\n        detectZone.run(function () {\r\n            detectZone.runGuarded(function () {\r\n                throw throwError('blacklistStackFrames');\r\n            });\r\n        });\r\n    };\r\n    // Cause the error to extract the stack frames.\r\n    detectZone.runTask(detectZone.scheduleMacroTask('detect', detectRunFn, null, function () { return null; }, null));\r\n    detectZone.runTask(detectZone.scheduleMacroTask('detect', detectRunWithoutNewFn, null, function () { return null; }, null));\r\n    function handleDetectError(error) {\r\n        var frames = error.stack ? error.stack.split(/\\n/) : [];\r\n        while (frames.length) {\r\n            var frame = frames.shift();\r\n            // On safari it is possible to have stack frame with no line number.\r\n            // This check makes sure that we don't filter frames on name only (must have\r\n            // linenumber)\r\n            var trimmedFrame = frame.trim().split('[')[0].trim();\r\n            if (/:\\d+:\\d+/.test(trimmedFrame) && !blackListedStackFrames.hasOwnProperty(trimmedFrame)) {\r\n                blackListedStackFrames[trimmedFrame] = FrameType.blackList;\r\n            }\r\n            // when we found runGuarded or runTask, we should stop\r\n            // otherwise we will store some stack frames like\r\n            // module.load, require and something like that\r\n            var fnName = frame.split('(')[0].split('@')[0];\r\n            if (fnName.indexOf('runGuarded') !== -1) {\r\n                break;\r\n            }\r\n            else if (fnName.indexOf('runTask') !== -1) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    var detectEmptyZone = Zone.root.fork({\r\n        name: 'detectEmptyZone',\r\n        onHandleError: function (parentDelegate, currentZone, targetZone, error) {\r\n            parentDelegate.handleError(targetZone, error);\r\n            handleDetectError(error);\r\n            return false;\r\n        }\r\n    });\r\n    var detectZoneWithCallbacks = Zone.root.fork({\r\n        name: 'detectCallbackZone',\r\n        onFork: function (parentDelegate, currentZone, targetZone, zoneSpec) {\r\n            // we need to generate Error with or without new\r\n            handleDetectError(throwError('onFork'));\r\n            handleDetectError(throwError('onFork', false));\r\n            return parentDelegate.fork(targetZone, zoneSpec);\r\n        },\r\n        onIntercept: function (parentDelegate, currentZone, targetZone, delegate, source) {\r\n            handleDetectError(throwError('onIntercept'));\r\n            handleDetectError(throwError('onIntercept', false));\r\n            return parentDelegate.intercept(targetZone, delegate, source);\r\n        },\r\n        onInvoke: function (parentZoneDelegate, currentZone, targetZone, delegate, applyThis, applyArgs, source) {\r\n            handleDetectError(throwError('onInvoke'));\r\n            handleDetectError(throwError('onInvoke', false));\r\n            return parentZoneDelegate.invoke(targetZone, delegate, applyThis, applyArgs, source);\r\n        },\r\n        onScheduleTask: function (parentZoneDelegate, currentZone, targetZone, task) {\r\n            handleDetectError(throwError('onScheduleTask'));\r\n            handleDetectError(throwError('onScheduleTask', false));\r\n            return parentZoneDelegate.scheduleTask(targetZone, task);\r\n        },\r\n        onInvokeTask: function (parentZoneDelegate, currentZone, targetZone, task, applyThis, applyArgs) {\r\n            handleDetectError(throwError('onInvokeTask'));\r\n            handleDetectError(throwError('onInvokeTask', false));\r\n            return parentZoneDelegate.invokeTask(targetZone, task, applyThis, applyArgs);\r\n        },\r\n        onCancelTask: function (parentZoneDelegate, currentZone, targetZone, task) {\r\n            handleDetectError(throwError('onCancelTask'));\r\n            handleDetectError(throwError('onCancelTask', false));\r\n            return parentZoneDelegate.cancelTask(targetZone, task);\r\n        },\r\n        onHasTask: function (delegate, current, target, hasTaskState) {\r\n            handleDetectError(throwError('onHasTask'));\r\n            handleDetectError(throwError('onHasTask', false));\r\n            return delegate.hasTask(target, hasTaskState);\r\n        },\r\n        onHandleError: function (parentDelegate, currentZone, targetZone, error) {\r\n            parentDelegate.handleError(targetZone, error);\r\n            handleDetectError(error);\r\n            return false;\r\n        }\r\n    });\r\n    var detectFn = function () {\r\n        throw throwError('zoneAwareFrames');\r\n    };\r\n    var detectWithoutNewFn = function () {\r\n        throw throwError('zoneAwareFrames', false);\r\n    };\r\n    var detectPromiseFn = function () {\r\n        new Promise(function (resolve, reject) {\r\n            reject(throwError('zoneAwareFrames'));\r\n        });\r\n    };\r\n    var detectPromiseWithoutNewFn = function () {\r\n        new Promise(function (resolve, reject) {\r\n            reject(throwError('zoneAwareFrames', false));\r\n        });\r\n    };\r\n    var detectPromiseCaughtFn = function () {\r\n        var p = new Promise(function (resolve, reject) {\r\n            reject(throwError('zoneAwareFrames'));\r\n        });\r\n        p.catch(function (err) {\r\n            throw err;\r\n        });\r\n    };\r\n    var detectPromiseCaughtWithoutNewFn = function () {\r\n        var p = new Promise(function (resolve, reject) {\r\n            reject(throwError('zoneAwareFrames', false));\r\n        });\r\n        p.catch(function (err) {\r\n            throw err;\r\n        });\r\n    };\r\n    // Cause the error to extract the stack frames.\r\n    detectEmptyZone.runTask(detectEmptyZone.scheduleEventTask('detect', detectFn, null, function () { return null; }, null));\r\n    detectZoneWithCallbacks.runTask(detectZoneWithCallbacks.scheduleEventTask('detect', detectFn, null, function () { return null; }, null));\r\n    detectEmptyZone.runTask(detectEmptyZone.scheduleMacroTask('detect', detectFn, null, function () { return null; }, null));\r\n    detectZoneWithCallbacks.runTask(detectZoneWithCallbacks.scheduleMacroTask('detect', detectFn, null, function () { return null; }, null));\r\n    detectEmptyZone.runTask(detectEmptyZone.scheduleMicroTask('detect', detectFn, null, function () { return null; }));\r\n    detectZoneWithCallbacks.runTask(detectZoneWithCallbacks.scheduleMicroTask('detect', detectFn, null, function () { return null; }));\r\n    detectEmptyZone.runGuarded(function () {\r\n        detectEmptyZone.run(detectFn);\r\n    });\r\n    detectZoneWithCallbacks.runGuarded(function () {\r\n        detectEmptyZone.run(detectFn);\r\n    });\r\n    detectEmptyZone.runTask(detectEmptyZone.scheduleEventTask('detect', detectWithoutNewFn, null, function () { return null; }, null));\r\n    detectZoneWithCallbacks.runTask(detectZoneWithCallbacks.scheduleEventTask('detect', detectWithoutNewFn, null, function () { return null; }, null));\r\n    detectEmptyZone.runTask(detectEmptyZone.scheduleMacroTask('detect', detectWithoutNewFn, null, function () { return null; }, null));\r\n    detectZoneWithCallbacks.runTask(detectZoneWithCallbacks.scheduleMacroTask('detect', detectWithoutNewFn, null, function () { return null; }, null));\r\n    detectEmptyZone.runTask(detectEmptyZone.scheduleMicroTask('detect', detectWithoutNewFn, null, function () { return null; }));\r\n    detectZoneWithCallbacks.runTask(detectZoneWithCallbacks.scheduleMicroTask('detect', detectWithoutNewFn, null, function () { return null; }));\r\n    detectEmptyZone.runGuarded(function () {\r\n        detectEmptyZone.run(detectWithoutNewFn);\r\n    });\r\n    detectZoneWithCallbacks.runGuarded(function () {\r\n        detectEmptyZone.run(detectWithoutNewFn);\r\n    });\r\n    detectEmptyZone.runGuarded(detectPromiseFn);\r\n    detectZoneWithCallbacks.runGuarded(detectPromiseFn);\r\n    detectEmptyZone.runGuarded(detectPromiseWithoutNewFn);\r\n    detectZoneWithCallbacks.runGuarded(detectPromiseWithoutNewFn);\r\n    detectEmptyZone.runGuarded(detectPromiseCaughtFn);\r\n    detectZoneWithCallbacks.runGuarded(detectPromiseCaughtFn);\r\n    detectEmptyZone.runGuarded(detectPromiseCaughtWithoutNewFn);\r\n    detectZoneWithCallbacks.runGuarded(detectPromiseCaughtWithoutNewFn);\r\n    NativeError.stackTraceLimit = nativeStackTraceLimit;\r\n    return global['Zone'] = Zone;\r\n})(typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || global);\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Suppress closure compiler errors about unknown 'Zone' variable\r\n * @fileoverview\r\n * @suppress {undefinedVars,globalThis}\r\n */\r\nvar zoneSymbol = function (n) { return \"__zone_symbol__\" + n; };\r\nvar _global$1 = typeof window === 'object' && window || typeof self === 'object' && self || global;\r\nfunction bindArguments(args, source) {\r\n    for (var i = args.length - 1; i >= 0; i--) {\r\n        if (typeof args[i] === 'function') {\r\n            args[i] = Zone.current.wrap(args[i], source + '_' + i);\r\n        }\r\n    }\r\n    return args;\r\n}\r\nfunction patchPrototype(prototype, fnNames) {\r\n    var source = prototype.constructor['name'];\r\n    var _loop_1 = function (i) {\r\n        var name_1 = fnNames[i];\r\n        var delegate = prototype[name_1];\r\n        if (delegate) {\r\n            prototype[name_1] = (function (delegate) {\r\n                return function () {\r\n                    return delegate.apply(this, bindArguments(arguments, source + '.' + name_1));\r\n                };\r\n            })(delegate);\r\n        }\r\n    };\r\n    for (var i = 0; i < fnNames.length; i++) {\r\n        _loop_1(i);\r\n    }\r\n}\r\nvar isWebWorker = (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope);\r\nvar isNode = (!('nw' in _global$1) && typeof process !== 'undefined' &&\r\n    {}.toString.call(process) === '[object process]');\r\nvar isBrowser = !isNode && !isWebWorker && !!(typeof window !== 'undefined' && window['HTMLElement']);\r\n// we are in electron of nw, so we are both browser and nodejs\r\nvar isMix = typeof process !== 'undefined' &&\r\n    {}.toString.call(process) === '[object process]' && !isWebWorker &&\r\n    !!(typeof window !== 'undefined' && window['HTMLElement']);\r\nfunction patchProperty(obj, prop) {\r\n    var desc = Object.getOwnPropertyDescriptor(obj, prop) || { enumerable: true, configurable: true };\r\n    var originalDesc = Object.getOwnPropertyDescriptor(obj, 'original' + prop);\r\n    if (!originalDesc && desc.get) {\r\n        Object.defineProperty(obj, 'original' + prop, { enumerable: false, configurable: true, get: desc.get });\r\n    }\r\n    // A property descriptor cannot have getter/setter and be writable\r\n    // deleting the writable and value properties avoids this error:\r\n    //\r\n    // TypeError: property descriptors must not specify a value or be writable when a\r\n    // getter or setter has been specified\r\n    delete desc.writable;\r\n    delete desc.value;\r\n    // substr(2) cuz 'onclick' -> 'click', etc\r\n    var eventName = prop.substr(2);\r\n    var _prop = zoneSymbol('_' + prop);\r\n    desc.set = function (fn) {\r\n        if (this[_prop]) {\r\n            this.removeEventListener(eventName, this[_prop]);\r\n        }\r\n        if (typeof fn === 'function') {\r\n            var wrapFn = function (event) {\r\n                var result;\r\n                result = fn.apply(this, arguments);\r\n                if (result != undefined && !result)\r\n                    event.preventDefault();\r\n            };\r\n            this[_prop] = wrapFn;\r\n            this.addEventListener(eventName, wrapFn, false);\r\n        }\r\n        else {\r\n            this[_prop] = null;\r\n        }\r\n    };\r\n    // The getter would return undefined for unassigned properties but the default value of an\r\n    // unassigned property is null\r\n    desc.get = function () {\r\n        var r = this[_prop] || null;\r\n        // result will be null when use inline event attribute,\r\n        // such as <button onclick=\"func();\">OK</button>\r\n        // because the onclick function is internal raw uncompiled handler\r\n        // the onclick will be evaluated when first time event was triggered or\r\n        // the property is accessed, https://github.com/angular/zone.js/issues/525\r\n        // so we should use original native get to retrieve the handler\r\n        if (r === null) {\r\n            if (originalDesc && originalDesc.get) {\r\n                r = originalDesc.get.apply(this, arguments);\r\n                if (r) {\r\n                    desc.set.apply(this, [r]);\r\n                    if (typeof this['removeAttribute'] === 'function') {\r\n                        this.removeAttribute(prop);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this[_prop] || null;\r\n    };\r\n    Object.defineProperty(obj, prop, desc);\r\n}\r\n\r\nfunction patchOnProperties(obj, properties) {\r\n    var onProperties = [];\r\n    for (var prop in obj) {\r\n        if (prop.substr(0, 2) == 'on') {\r\n            onProperties.push(prop);\r\n        }\r\n    }\r\n    for (var j = 0; j < onProperties.length; j++) {\r\n        patchProperty(obj, onProperties[j]);\r\n    }\r\n    if (properties) {\r\n        for (var i = 0; i < properties.length; i++) {\r\n            patchProperty(obj, 'on' + properties[i]);\r\n        }\r\n    }\r\n}\r\n\r\nvar EVENT_TASKS = zoneSymbol('eventTasks');\r\n// For EventTarget\r\nvar ADD_EVENT_LISTENER = 'addEventListener';\r\nvar REMOVE_EVENT_LISTENER = 'removeEventListener';\r\nfunction findExistingRegisteredTask(target, handler, name, capture, remove) {\r\n    var eventTasks = target[EVENT_TASKS];\r\n    if (eventTasks) {\r\n        for (var i = 0; i < eventTasks.length; i++) {\r\n            var eventTask = eventTasks[i];\r\n            var data = eventTask.data;\r\n            var listener = data.handler;\r\n            if ((data.handler === handler || listener.listener === handler) &&\r\n                data.useCapturing === capture && data.eventName === name) {\r\n                if (remove) {\r\n                    eventTasks.splice(i, 1);\r\n                }\r\n                return eventTask;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction attachRegisteredEvent(target, eventTask, isPrepend) {\r\n    var eventTasks = target[EVENT_TASKS];\r\n    if (!eventTasks) {\r\n        eventTasks = target[EVENT_TASKS] = [];\r\n    }\r\n    if (isPrepend) {\r\n        eventTasks.unshift(eventTask);\r\n    }\r\n    else {\r\n        eventTasks.push(eventTask);\r\n    }\r\n}\r\nvar defaultListenerMetaCreator = function (self, args) {\r\n    return {\r\n        useCapturing: args[2],\r\n        eventName: args[0],\r\n        handler: args[1],\r\n        target: self || _global$1,\r\n        name: args[0],\r\n        invokeAddFunc: function (addFnSymbol, delegate) {\r\n            if (delegate && delegate.invoke) {\r\n                return this.target[addFnSymbol](this.eventName, delegate.invoke, this.useCapturing);\r\n            }\r\n            else {\r\n                return this.target[addFnSymbol](this.eventName, delegate, this.useCapturing);\r\n            }\r\n        },\r\n        invokeRemoveFunc: function (removeFnSymbol, delegate) {\r\n            if (delegate && delegate.invoke) {\r\n                return this.target[removeFnSymbol](this.eventName, delegate.invoke, this.useCapturing);\r\n            }\r\n            else {\r\n                return this.target[removeFnSymbol](this.eventName, delegate, this.useCapturing);\r\n            }\r\n        }\r\n    };\r\n};\r\nfunction makeZoneAwareAddListener(addFnName, removeFnName, useCapturingParam, allowDuplicates, isPrepend, metaCreator) {\r\n    if (useCapturingParam === void 0) { useCapturingParam = true; }\r\n    if (allowDuplicates === void 0) { allowDuplicates = false; }\r\n    if (isPrepend === void 0) { isPrepend = false; }\r\n    if (metaCreator === void 0) { metaCreator = defaultListenerMetaCreator; }\r\n    var addFnSymbol = zoneSymbol(addFnName);\r\n    var removeFnSymbol = zoneSymbol(removeFnName);\r\n    var defaultUseCapturing = useCapturingParam ? false : undefined;\r\n    function scheduleEventListener(eventTask) {\r\n        var meta = eventTask.data;\r\n        attachRegisteredEvent(meta.target, eventTask, isPrepend);\r\n        return meta.invokeAddFunc(addFnSymbol, eventTask);\r\n    }\r\n    function cancelEventListener(eventTask) {\r\n        var meta = eventTask.data;\r\n        findExistingRegisteredTask(meta.target, eventTask.invoke, meta.eventName, meta.useCapturing, true);\r\n        return meta.invokeRemoveFunc(removeFnSymbol, eventTask);\r\n    }\r\n    return function zoneAwareAddListener(self, args) {\r\n        var data = metaCreator(self, args);\r\n        data.useCapturing = data.useCapturing || defaultUseCapturing;\r\n        // - Inside a Web Worker, `this` is undefined, the context is `global`\r\n        // - When `addEventListener` is called on the global context in strict mode, `this` is undefined\r\n        // see https://github.com/angular/zone.js/issues/190\r\n        var delegate = null;\r\n        if (typeof data.handler == 'function') {\r\n            delegate = data.handler;\r\n        }\r\n        else if (data.handler && data.handler.handleEvent) {\r\n            delegate = function (event) { return data.handler.handleEvent(event); };\r\n        }\r\n        var validZoneHandler = false;\r\n        try {\r\n            // In cross site contexts (such as WebDriver frameworks like Selenium),\r\n            // accessing the handler object here will cause an exception to be thrown which\r\n            // will fail tests prematurely.\r\n            validZoneHandler = data.handler && data.handler.toString() === '[object FunctionWrapper]';\r\n        }\r\n        catch (error) {\r\n            // Returning nothing here is fine, because objects in a cross-site context are unusable\r\n            return;\r\n        }\r\n        // Ignore special listeners of IE11 & Edge dev tools, see\r\n        // https://github.com/angular/zone.js/issues/150\r\n        if (!delegate || validZoneHandler) {\r\n            return data.invokeAddFunc(addFnSymbol, data.handler);\r\n        }\r\n        if (!allowDuplicates) {\r\n            var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.useCapturing, false);\r\n            if (eventTask) {\r\n                // we already registered, so this will have noop.\r\n                return data.invokeAddFunc(addFnSymbol, eventTask);\r\n            }\r\n        }\r\n        var zone = Zone.current;\r\n        var source = data.target.constructor['name'] + '.' + addFnName + ':' + data.eventName;\r\n        zone.scheduleEventTask(source, delegate, data, scheduleEventListener, cancelEventListener);\r\n    };\r\n}\r\nfunction makeZoneAwareRemoveListener(fnName, useCapturingParam, metaCreator) {\r\n    if (useCapturingParam === void 0) { useCapturingParam = true; }\r\n    if (metaCreator === void 0) { metaCreator = defaultListenerMetaCreator; }\r\n    var symbol = zoneSymbol(fnName);\r\n    var defaultUseCapturing = useCapturingParam ? false : undefined;\r\n    return function zoneAwareRemoveListener(self, args) {\r\n        var data = metaCreator(self, args);\r\n        data.useCapturing = data.useCapturing || defaultUseCapturing;\r\n        // - Inside a Web Worker, `this` is undefined, the context is `global`\r\n        // - When `addEventListener` is called on the global context in strict mode, `this` is undefined\r\n        // see https://github.com/angular/zone.js/issues/190\r\n        var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.useCapturing, true);\r\n        if (eventTask) {\r\n            eventTask.zone.cancelTask(eventTask);\r\n        }\r\n        else {\r\n            data.invokeRemoveFunc(symbol, data.handler);\r\n        }\r\n    };\r\n}\r\n\r\n\r\nvar zoneAwareAddEventListener = makeZoneAwareAddListener(ADD_EVENT_LISTENER, REMOVE_EVENT_LISTENER);\r\nvar zoneAwareRemoveEventListener = makeZoneAwareRemoveListener(REMOVE_EVENT_LISTENER);\r\nfunction patchEventTargetMethods(obj, addFnName, removeFnName, metaCreator) {\r\n    if (addFnName === void 0) { addFnName = ADD_EVENT_LISTENER; }\r\n    if (removeFnName === void 0) { removeFnName = REMOVE_EVENT_LISTENER; }\r\n    if (metaCreator === void 0) { metaCreator = defaultListenerMetaCreator; }\r\n    if (obj && obj[addFnName]) {\r\n        patchMethod(obj, addFnName, function () { return makeZoneAwareAddListener(addFnName, removeFnName, true, false, false, metaCreator); });\r\n        patchMethod(obj, removeFnName, function () { return makeZoneAwareRemoveListener(removeFnName, true, metaCreator); });\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\nvar originalInstanceKey = zoneSymbol('originalInstance');\r\n// wrap some native API on `window`\r\nfunction patchClass(className) {\r\n    var OriginalClass = _global$1[className];\r\n    if (!OriginalClass)\r\n        return;\r\n    _global$1[className] = function () {\r\n        var a = bindArguments(arguments, className);\r\n        switch (a.length) {\r\n            case 0:\r\n                this[originalInstanceKey] = new OriginalClass();\r\n                break;\r\n            case 1:\r\n                this[originalInstanceKey] = new OriginalClass(a[0]);\r\n                break;\r\n            case 2:\r\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1]);\r\n                break;\r\n            case 3:\r\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);\r\n                break;\r\n            case 4:\r\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);\r\n                break;\r\n            default:\r\n                throw new Error('Arg list too long.');\r\n        }\r\n    };\r\n    var instance = new OriginalClass(function () { });\r\n    var prop;\r\n    for (prop in instance) {\r\n        // https://bugs.webkit.org/show_bug.cgi?id=44721\r\n        if (className === 'XMLHttpRequest' && prop === 'responseBlob')\r\n            continue;\r\n        (function (prop) {\r\n            if (typeof instance[prop] === 'function') {\r\n                _global$1[className].prototype[prop] = function () {\r\n                    return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);\r\n                };\r\n            }\r\n            else {\r\n                Object.defineProperty(_global$1[className].prototype, prop, {\r\n                    set: function (fn) {\r\n                        if (typeof fn === 'function') {\r\n                            this[originalInstanceKey][prop] = Zone.current.wrap(fn, className + '.' + prop);\r\n                        }\r\n                        else {\r\n                            this[originalInstanceKey][prop] = fn;\r\n                        }\r\n                    },\r\n                    get: function () {\r\n                        return this[originalInstanceKey][prop];\r\n                    }\r\n                });\r\n            }\r\n        }(prop));\r\n    }\r\n    for (prop in OriginalClass) {\r\n        if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {\r\n            _global$1[className][prop] = OriginalClass[prop];\r\n        }\r\n    }\r\n}\r\n\r\nfunction createNamedFn(name, delegate) {\r\n    try {\r\n        return (Function('f', \"return function \" + name + \"(){return f(this, arguments)}\"))(delegate);\r\n    }\r\n    catch (error) {\r\n        // if we fail, we must be CSP, just return delegate.\r\n        return function () {\r\n            return delegate(this, arguments);\r\n        };\r\n    }\r\n}\r\nfunction patchMethod(target, name, patchFn) {\r\n    var proto = target;\r\n    while (proto && Object.getOwnPropertyNames(proto).indexOf(name) === -1) {\r\n        proto = Object.getPrototypeOf(proto);\r\n    }\r\n    if (!proto && target[name]) {\r\n        // somehow we did not find it, but we can see it. This happens on IE for Window properties.\r\n        proto = target;\r\n    }\r\n    var delegateName = zoneSymbol(name);\r\n    var delegate;\r\n    if (proto && !(delegate = proto[delegateName])) {\r\n        delegate = proto[delegateName] = proto[name];\r\n        proto[name] = createNamedFn(name, patchFn(delegate, delegateName, name));\r\n    }\r\n    return delegate;\r\n}\r\n// TODO: @JiaLiPassion, support cancel task later if necessary\r\n\r\n\r\nfunction findEventTask(target, evtName) {\r\n    var eventTasks = target[zoneSymbol('eventTasks')];\r\n    var result = [];\r\n    if (eventTasks) {\r\n        for (var i = 0; i < eventTasks.length; i++) {\r\n            var eventTask = eventTasks[i];\r\n            var data = eventTask.data;\r\n            var eventName = data && data.eventName;\r\n            if (eventName === evtName) {\r\n                result.push(eventTask);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\nZone[zoneSymbol('patchEventTargetMethods')] = patchEventTargetMethods;\r\nZone[zoneSymbol('patchOnProperties')] = patchOnProperties;\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction patchTimer(window, setName, cancelName, nameSuffix) {\r\n    var setNative = null;\r\n    var clearNative = null;\r\n    setName += nameSuffix;\r\n    cancelName += nameSuffix;\r\n    var tasksByHandleId = {};\r\n    function scheduleTask(task) {\r\n        var data = task.data;\r\n        function timer() {\r\n            try {\r\n                task.invoke.apply(this, arguments);\r\n            }\r\n            finally {\r\n                delete tasksByHandleId[data.handleId];\r\n            }\r\n        }\r\n        \r\n        data.args[0] = timer;\r\n        data.handleId = setNative.apply(window, data.args);\r\n        tasksByHandleId[data.handleId] = task;\r\n        return task;\r\n    }\r\n    function clearTask(task) {\r\n        delete tasksByHandleId[task.data.handleId];\r\n        return clearNative(task.data.handleId);\r\n    }\r\n    setNative =\r\n        patchMethod(window, setName, function (delegate) { return function (self, args) {\r\n            if (typeof args[0] === 'function') {\r\n                var zone = Zone.current;\r\n                var options = {\r\n                    handleId: null,\r\n                    isPeriodic: nameSuffix === 'Interval',\r\n                    delay: (nameSuffix === 'Timeout' || nameSuffix === 'Interval') ? args[1] || 0 : null,\r\n                    args: args\r\n                };\r\n                var task = zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);\r\n                if (!task) {\r\n                    return task;\r\n                }\r\n                // Node.js must additionally support the ref and unref functions.\r\n                var handle = task.data.handleId;\r\n                // check whether handle is null, because some polyfill or browser\r\n                // may return undefined from setTimeout/setInterval/setImmediate/requestAnimationFrame\r\n                if (handle && handle.ref && handle.unref && typeof handle.ref === 'function' &&\r\n                    typeof handle.unref === 'function') {\r\n                    task.ref = handle.ref.bind(handle);\r\n                    task.unref = handle.unref.bind(handle);\r\n                }\r\n                return task;\r\n            }\r\n            else {\r\n                // cause an error by calling it directly.\r\n                return delegate.apply(window, args);\r\n            }\r\n        }; });\r\n    clearNative =\r\n        patchMethod(window, cancelName, function (delegate) { return function (self, args) {\r\n            var task = typeof args[0] === 'number' ? tasksByHandleId[args[0]] : args[0];\r\n            if (task && typeof task.type === 'string') {\r\n                if (task.state !== 'notScheduled' &&\r\n                    (task.cancelFn && task.data.isPeriodic || task.runCount === 0)) {\r\n                    // Do not cancel already canceled functions\r\n                    task.zone.cancelTask(task);\r\n                }\r\n            }\r\n            else {\r\n                // cause an error by calling it directly.\r\n                delegate.apply(window, args);\r\n            }\r\n        }; });\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/*\r\n * This is necessary for Chrome and Chrome mobile, to enable\r\n * things like redefining `createdCallback` on an element.\r\n */\r\nvar _defineProperty = Object[zoneSymbol('defineProperty')] = Object.defineProperty;\r\nvar _getOwnPropertyDescriptor = Object[zoneSymbol('getOwnPropertyDescriptor')] =\r\n    Object.getOwnPropertyDescriptor;\r\nvar _create = Object.create;\r\nvar unconfigurablesKey = zoneSymbol('unconfigurables');\r\nfunction propertyPatch() {\r\n    Object.defineProperty = function (obj, prop, desc) {\r\n        if (isUnconfigurable(obj, prop)) {\r\n            throw new TypeError('Cannot assign to read only property \\'' + prop + '\\' of ' + obj);\r\n        }\r\n        var originalConfigurableFlag = desc.configurable;\r\n        if (prop !== 'prototype') {\r\n            desc = rewriteDescriptor(obj, prop, desc);\r\n        }\r\n        return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);\r\n    };\r\n    Object.defineProperties = function (obj, props) {\r\n        Object.keys(props).forEach(function (prop) {\r\n            Object.defineProperty(obj, prop, props[prop]);\r\n        });\r\n        return obj;\r\n    };\r\n    Object.create = function (obj, proto) {\r\n        if (typeof proto === 'object' && !Object.isFrozen(proto)) {\r\n            Object.keys(proto).forEach(function (prop) {\r\n                proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);\r\n            });\r\n        }\r\n        return _create(obj, proto);\r\n    };\r\n    Object.getOwnPropertyDescriptor = function (obj, prop) {\r\n        var desc = _getOwnPropertyDescriptor(obj, prop);\r\n        if (isUnconfigurable(obj, prop)) {\r\n            desc.configurable = false;\r\n        }\r\n        return desc;\r\n    };\r\n}\r\n\r\nfunction _redefineProperty(obj, prop, desc) {\r\n    var originalConfigurableFlag = desc.configurable;\r\n    desc = rewriteDescriptor(obj, prop, desc);\r\n    return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);\r\n}\r\n\r\nfunction isUnconfigurable(obj, prop) {\r\n    return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];\r\n}\r\nfunction rewriteDescriptor(obj, prop, desc) {\r\n    desc.configurable = true;\r\n    if (!desc.configurable) {\r\n        if (!obj[unconfigurablesKey]) {\r\n            _defineProperty(obj, unconfigurablesKey, { writable: true, value: {} });\r\n        }\r\n        obj[unconfigurablesKey][prop] = true;\r\n    }\r\n    return desc;\r\n}\r\nfunction _tryDefineProperty(obj, prop, desc, originalConfigurableFlag) {\r\n    try {\r\n        return _defineProperty(obj, prop, desc);\r\n    }\r\n    catch (error) {\r\n        if (desc.configurable) {\r\n            // In case of errors, when the configurable flag was likely set by rewriteDescriptor(), let's\r\n            // retry with the original flag value\r\n            if (typeof originalConfigurableFlag == 'undefined') {\r\n                delete desc.configurable;\r\n            }\r\n            else {\r\n                desc.configurable = originalConfigurableFlag;\r\n            }\r\n            try {\r\n                return _defineProperty(obj, prop, desc);\r\n            }\r\n            catch (error) {\r\n                var descJson = null;\r\n                try {\r\n                    descJson = JSON.stringify(desc);\r\n                }\r\n                catch (error) {\r\n                    descJson = descJson.toString();\r\n                }\r\n                console.log(\"Attempting to configure '\" + prop + \"' with descriptor '\" + descJson + \"' on object '\" + obj + \"' and got error, giving up: \" + error);\r\n            }\r\n        }\r\n        else {\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar WTF_ISSUE_555 = 'Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video';\r\nvar NO_EVENT_TARGET = 'ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Window,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex,WebSocket'\r\n    .split(',');\r\nvar EVENT_TARGET = 'EventTarget';\r\nfunction eventTargetPatch(_global) {\r\n    var apis = [];\r\n    var isWtf = _global['wtf'];\r\n    if (isWtf) {\r\n        // Workaround for: https://github.com/google/tracing-framework/issues/555\r\n        apis = WTF_ISSUE_555.split(',').map(function (v) { return 'HTML' + v + 'Element'; }).concat(NO_EVENT_TARGET);\r\n    }\r\n    else if (_global[EVENT_TARGET]) {\r\n        apis.push(EVENT_TARGET);\r\n    }\r\n    else {\r\n        // Note: EventTarget is not available in all browsers,\r\n        // if it's not available, we instead patch the APIs in the IDL that inherit from EventTarget\r\n        apis = NO_EVENT_TARGET;\r\n    }\r\n    for (var i = 0; i < apis.length; i++) {\r\n        var type = _global[apis[i]];\r\n        patchEventTargetMethods(type && type.prototype);\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// we have to patch the instance since the proto is non-configurable\r\nfunction apply(_global) {\r\n    var WS = _global.WebSocket;\r\n    // On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener\r\n    // On older Chrome, no need since EventTarget was already patched\r\n    if (!_global.EventTarget) {\r\n        patchEventTargetMethods(WS.prototype);\r\n    }\r\n    _global.WebSocket = function (a, b) {\r\n        var socket = arguments.length > 1 ? new WS(a, b) : new WS(a);\r\n        var proxySocket;\r\n        // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance\r\n        var onmessageDesc = Object.getOwnPropertyDescriptor(socket, 'onmessage');\r\n        if (onmessageDesc && onmessageDesc.configurable === false) {\r\n            proxySocket = Object.create(socket);\r\n            ['addEventListener', 'removeEventListener', 'send', 'close'].forEach(function (propName) {\r\n                proxySocket[propName] = function () {\r\n                    return socket[propName].apply(socket, arguments);\r\n                };\r\n            });\r\n        }\r\n        else {\r\n            // we can patch the real socket\r\n            proxySocket = socket;\r\n        }\r\n        patchOnProperties(proxySocket, ['close', 'error', 'message', 'open']);\r\n        return proxySocket;\r\n    };\r\n    for (var prop in WS) {\r\n        _global.WebSocket[prop] = WS[prop];\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar eventNames = 'copy cut paste abort blur focus canplay canplaythrough change click contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop durationchange emptied ended input invalid keydown keypress keyup load loadeddata loadedmetadata loadstart message mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup pause play playing progress ratechange reset scroll seeked seeking select show stalled submit suspend timeupdate volumechange waiting mozfullscreenchange mozfullscreenerror mozpointerlockchange mozpointerlockerror error webglcontextrestored webglcontextlost webglcontextcreationerror'\r\n    .split(' ');\r\nfunction propertyDescriptorPatch(_global) {\r\n    if (isNode && !isMix) {\r\n        return;\r\n    }\r\n    var supportsWebSocket = typeof WebSocket !== 'undefined';\r\n    if (canPatchViaPropertyDescriptor()) {\r\n        // for browsers that we can patch the descriptor:  Chrome & Firefox\r\n        if (isBrowser) {\r\n            patchOnProperties(HTMLElement.prototype, eventNames);\r\n        }\r\n        patchOnProperties(XMLHttpRequest.prototype, null);\r\n        if (typeof IDBIndex !== 'undefined') {\r\n            patchOnProperties(IDBIndex.prototype, null);\r\n            patchOnProperties(IDBRequest.prototype, null);\r\n            patchOnProperties(IDBOpenDBRequest.prototype, null);\r\n            patchOnProperties(IDBDatabase.prototype, null);\r\n            patchOnProperties(IDBTransaction.prototype, null);\r\n            patchOnProperties(IDBCursor.prototype, null);\r\n        }\r\n        if (supportsWebSocket) {\r\n            patchOnProperties(WebSocket.prototype, null);\r\n        }\r\n    }\r\n    else {\r\n        // Safari, Android browsers (Jelly Bean)\r\n        patchViaCapturingAllTheEvents();\r\n        patchClass('XMLHttpRequest');\r\n        if (supportsWebSocket) {\r\n            apply(_global);\r\n        }\r\n    }\r\n}\r\nfunction canPatchViaPropertyDescriptor() {\r\n    if ((isBrowser || isMix) && !Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'onclick') &&\r\n        typeof Element !== 'undefined') {\r\n        // WebKit https://bugs.webkit.org/show_bug.cgi?id=134364\r\n        // IDL interface attributes are not configurable\r\n        var desc = Object.getOwnPropertyDescriptor(Element.prototype, 'onclick');\r\n        if (desc && !desc.configurable)\r\n            return false;\r\n    }\r\n    var xhrDesc = Object.getOwnPropertyDescriptor(XMLHttpRequest.prototype, 'onreadystatechange');\r\n    // add enumerable and configurable here because in opera\r\n    // by default XMLHttpRequest.prototype.onreadystatechange is undefined\r\n    // without adding enumerable and configurable will cause onreadystatechange\r\n    // non-configurable\r\n    Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', {\r\n        enumerable: true,\r\n        configurable: true,\r\n        get: function () {\r\n            return true;\r\n        }\r\n    });\r\n    var req = new XMLHttpRequest();\r\n    var result = !!req.onreadystatechange;\r\n    // restore original desc\r\n    Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', xhrDesc || {});\r\n    return result;\r\n}\r\n\r\nvar unboundKey = zoneSymbol('unbound');\r\n// Whenever any eventListener fires, we check the eventListener target and all parents\r\n// for `onwhatever` properties and replace them with zone-bound functions\r\n// - Chrome (for now)\r\nfunction patchViaCapturingAllTheEvents() {\r\n    var _loop_1 = function (i) {\r\n        var property = eventNames[i];\r\n        var onproperty = 'on' + property;\r\n        self.addEventListener(property, function (event) {\r\n            var elt = event.target, bound, source;\r\n            if (elt) {\r\n                source = elt.constructor['name'] + '.' + onproperty;\r\n            }\r\n            else {\r\n                source = 'unknown.' + onproperty;\r\n            }\r\n            while (elt) {\r\n                if (elt[onproperty] && !elt[onproperty][unboundKey]) {\r\n                    bound = Zone.current.wrap(elt[onproperty], source);\r\n                    bound[unboundKey] = elt[onproperty];\r\n                    elt[onproperty] = bound;\r\n                }\r\n                elt = elt.parentElement;\r\n            }\r\n        }, true);\r\n    };\r\n    for (var i = 0; i < eventNames.length; i++) {\r\n        _loop_1(i);\r\n    }\r\n    \r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction registerElementPatch(_global) {\r\n    if ((!isBrowser && !isMix) || !('registerElement' in _global.document)) {\r\n        return;\r\n    }\r\n    var _registerElement = document.registerElement;\r\n    var callbacks = ['createdCallback', 'attachedCallback', 'detachedCallback', 'attributeChangedCallback'];\r\n    document.registerElement = function (name, opts) {\r\n        if (opts && opts.prototype) {\r\n            callbacks.forEach(function (callback) {\r\n                var source = 'Document.registerElement::' + callback;\r\n                if (opts.prototype.hasOwnProperty(callback)) {\r\n                    var descriptor = Object.getOwnPropertyDescriptor(opts.prototype, callback);\r\n                    if (descriptor && descriptor.value) {\r\n                        descriptor.value = Zone.current.wrap(descriptor.value, source);\r\n                        _redefineProperty(opts.prototype, callback, descriptor);\r\n                    }\r\n                    else {\r\n                        opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);\r\n                    }\r\n                }\r\n                else if (opts.prototype[callback]) {\r\n                    opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);\r\n                }\r\n            });\r\n        }\r\n        return _registerElement.apply(document, [name, opts]);\r\n    };\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar set = 'set';\r\nvar clear = 'clear';\r\nvar blockingMethods = ['alert', 'prompt', 'confirm'];\r\nvar _global = typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || global;\r\npatchTimer(_global, set, clear, 'Timeout');\r\npatchTimer(_global, set, clear, 'Interval');\r\npatchTimer(_global, set, clear, 'Immediate');\r\npatchTimer(_global, 'request', 'cancel', 'AnimationFrame');\r\npatchTimer(_global, 'mozRequest', 'mozCancel', 'AnimationFrame');\r\npatchTimer(_global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');\r\nfor (var i = 0; i < blockingMethods.length; i++) {\r\n    var name_1 = blockingMethods[i];\r\n    patchMethod(_global, name_1, function (delegate, symbol, name) {\r\n        return function (s, args) {\r\n            return Zone.current.run(delegate, _global, args, name);\r\n        };\r\n    });\r\n}\r\neventTargetPatch(_global);\r\n// patch XMLHttpRequestEventTarget's addEventListener/removeEventListener\r\nvar XMLHttpRequestEventTarget = _global['XMLHttpRequestEventTarget'];\r\nif (XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype) {\r\n    patchEventTargetMethods(XMLHttpRequestEventTarget.prototype);\r\n}\r\npropertyDescriptorPatch(_global);\r\npatchClass('MutationObserver');\r\npatchClass('WebKitMutationObserver');\r\npatchClass('FileReader');\r\npropertyPatch();\r\nregisterElementPatch(_global);\r\n// Treat XMLHTTPRequest as a macrotask.\r\npatchXHR(_global);\r\nvar XHR_TASK = zoneSymbol('xhrTask');\r\nvar XHR_SYNC = zoneSymbol('xhrSync');\r\nvar XHR_LISTENER = zoneSymbol('xhrListener');\r\nvar XHR_SCHEDULED = zoneSymbol('xhrScheduled');\r\nfunction patchXHR(window) {\r\n    function findPendingTask(target) {\r\n        var pendingTask = target[XHR_TASK];\r\n        return pendingTask;\r\n    }\r\n    function scheduleTask(task) {\r\n        XMLHttpRequest[XHR_SCHEDULED] = false;\r\n        var data = task.data;\r\n        // remove existing event listener\r\n        var listener = data.target[XHR_LISTENER];\r\n        if (listener) {\r\n            data.target.removeEventListener('readystatechange', listener);\r\n        }\r\n        var newListener = data.target[XHR_LISTENER] = function () {\r\n            if (data.target.readyState === data.target.DONE) {\r\n                // sometimes on some browsers XMLHttpRequest will fire onreadystatechange with\r\n                // readyState=4 multiple times, so we need to check task state here\r\n                if (!data.aborted && XMLHttpRequest[XHR_SCHEDULED] && task.state === 'scheduled') {\r\n                    task.invoke();\r\n                }\r\n            }\r\n        };\r\n        data.target.addEventListener('readystatechange', newListener);\r\n        var storedTask = data.target[XHR_TASK];\r\n        if (!storedTask) {\r\n            data.target[XHR_TASK] = task;\r\n        }\r\n        sendNative.apply(data.target, data.args);\r\n        XMLHttpRequest[XHR_SCHEDULED] = true;\r\n        return task;\r\n    }\r\n    function placeholderCallback() { }\r\n    function clearTask(task) {\r\n        var data = task.data;\r\n        // Note - ideally, we would call data.target.removeEventListener here, but it's too late\r\n        // to prevent it from firing. So instead, we store info for the event listener.\r\n        data.aborted = true;\r\n        return abortNative.apply(data.target, data.args);\r\n    }\r\n    var openNative = patchMethod(window.XMLHttpRequest.prototype, 'open', function () { return function (self, args) {\r\n        self[XHR_SYNC] = args[2] == false;\r\n        return openNative.apply(self, args);\r\n    }; });\r\n    var sendNative = patchMethod(window.XMLHttpRequest.prototype, 'send', function () { return function (self, args) {\r\n        var zone = Zone.current;\r\n        if (self[XHR_SYNC]) {\r\n            // if the XHR is sync there is no task to schedule, just execute the code.\r\n            return sendNative.apply(self, args);\r\n        }\r\n        else {\r\n            var options = { target: self, isPeriodic: false, delay: null, args: args, aborted: false };\r\n            return zone.scheduleMacroTask('XMLHttpRequest.send', placeholderCallback, options, scheduleTask, clearTask);\r\n        }\r\n    }; });\r\n    var abortNative = patchMethod(window.XMLHttpRequest.prototype, 'abort', function (delegate) { return function (self, args) {\r\n        var task = findPendingTask(self);\r\n        if (task && typeof task.type == 'string') {\r\n            // If the XHR has already completed, do nothing.\r\n            // If the XHR has already been aborted, do nothing.\r\n            // Fix #569, call abort multiple times before done will cause\r\n            // macroTask task count be negative number\r\n            if (task.cancelFn == null || (task.data && task.data.aborted)) {\r\n                return;\r\n            }\r\n            task.zone.cancelTask(task);\r\n        }\r\n        // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no task\r\n        // to cancel. Do nothing.\r\n    }; });\r\n}\r\n/// GEO_LOCATION\r\nif (_global['navigator'] && _global['navigator'].geolocation) {\r\n    patchPrototype(_global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);\r\n}\r\n// handle unhandled promise rejection\r\nfunction findPromiseRejectionHandler(evtName) {\r\n    return function (e) {\r\n        var eventTasks = findEventTask(_global, evtName);\r\n        eventTasks.forEach(function (eventTask) {\r\n            // windows has added unhandledrejection event listener\r\n            // trigger the event listener\r\n            var PromiseRejectionEvent = _global['PromiseRejectionEvent'];\r\n            if (PromiseRejectionEvent) {\r\n                var evt = new PromiseRejectionEvent(evtName, { promise: e.promise, reason: e.rejection });\r\n                eventTask.invoke(evt);\r\n            }\r\n        });\r\n    };\r\n}\r\nif (_global['PromiseRejectionEvent']) {\r\n    Zone[zoneSymbol('unhandledPromiseRejectionHandler')] =\r\n        findPromiseRejectionHandler('unhandledrejection');\r\n    Zone[zoneSymbol('rejectionHandledHandler')] =\r\n        findPromiseRejectionHandler('rejectionhandled');\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n})));\r\n",null]}